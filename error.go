// © Copyright 2016 GREAT BEYOND AB
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package mailchimp

import (
	"fmt"
	"strings"
)

// ErrorNoClient will be returned when the receiver has no client
// assigned by parent. Always create api objects by retrieving
// them from the Client object. You can assign the client manually
// at creation with Object{client: myClient}.
var ErrorNoClient = fmt.Errorf("no client assigned by parent")

// Error holds information about a failed call.
// You should cast this to a mailchimp.Error to gain more information
// about the status of your request.
//
//  if err != nil {
//      if err, ok := err.(mailchimp.Error); ok {
//          if err.Status == http.StatusNotFound {
//              return nil // we don't care about this error
//          }
//      }
//      return err
//  }
type Error struct {
	// An absolute URI that identifies the problem type. When dereferenced,
	// it should provide human-readable documentation for the problem type.
	Type string `json:"type"`

	// A short, human-readable summary of the problem type. It shouldn’t
	// change based on the occurrence of the problem, except for purposes of localization.
	Title string `json:"title"`

	// The HTTP status code (RFC2616, Section 6) generated by the
	// origin server for this occurrence of the problem.
	Status int `json:"status"`

	// A human-readable explanation specific to this occurrence of the
	// problem. Learn more about errors.
	Detail string `json:"detail"`

	// A string that identifies this specific occurrence of the problem.
	// Please provide this ID when contacting support.
	Instance string `json:"instance"`

	// A collection of error messages
	Errors []*ErrorMessage `json:"errors"`
}

// ErrorMessage contains field specific error information
type ErrorMessage struct {
	Field   string `json:"field"`
	Message string `json:"message"`
}

func (e Error) Error() string {
	errorstr := ""
	if len(e.Errors) > 0 {
		errors := []string{}
		for _, e := range e.Errors {
			errors = append(errors, fmt.Sprintf("[%s: %s]", e.Field, e.Message))
		}
		errorstr = ": " + strings.Join(errors, ", ")
	}
	return fmt.Sprintf("%s (%d): %s%s", e.Title, e.Status, e.Detail, errorstr)
}
